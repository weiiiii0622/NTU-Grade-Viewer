import os
from functools import wraps
from typing import Annotated
from urllib.parse import quote

import routes
import uvicorn
from auth import add_user
from db import DatabaseConnectionError, test
from dotenv import load_dotenv
from errors import (
    InternalErrorResponse,
    UnauthorizedErrorResponse,
    ValidationErrorResponse,
)
from fastapi import FastAPI, HTTPException, Path, Request, Response, status
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from utils.general import add_decorator_doc

load_dotenv(os.path.join(os.path.dirname(__file__), "../.env"))

from models import StudentId


@add_decorator_doc
def test_only(f):
    # TODO: use some special header
    @wraps(f)
    def _f(*args, **kwargs):
        return f(*args, **kwargs)

    return _f


app = FastAPI(
    responses={
        401: {"model": UnauthorizedErrorResponse},
        422: {"model": ValidationErrorResponse},
        500: {"model": InternalErrorResponse},
    }
)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
def get_root():
    return "HELLO ROOT"


for router in routes.ROUTERS:
    app.include_router(router)


@app.get("/db")
def db_test():
    return test()


@app.get("/add-auth/{student_id}")
@test_only
def _add_auth(
    student_id: Annotated[StudentId, Path(description="A student's id, e.g. b10401006.")],
    response: Response,
):
    """
    Add a user to database. This will set `token` in cookies.

    Returns:
        Token generated by given student id.
    """
    print(student_id)
    token = add_user(student_id)
    response.set_cookie("cookie_token", quote(token))
    return token


@app.exception_handler(DatabaseConnectionError)
async def db_connection_error_handler(request: Request, exc: DatabaseConnectionError):
    return JSONResponse({"msg": "db error"}, status_code=status.HTTP_503_SERVICE_UNAVAILABLE)
    # raise RequestValidationError([])


PORT = int(os.getenv("PORT_DEV", 5000))
# HOST = str(os.getenv("HOST_DEV"))

if __name__ == "__main__":
    uvicorn.run("app:app", port=PORT, host="0.0.0.0", reload=True)
